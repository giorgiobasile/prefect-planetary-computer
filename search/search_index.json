{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-planetary-computer","text":"<p>Prefect integrations with the Microsoft Planetary Computer (PC).</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<p>This collection includes a Credentials Block \ud83d\udd11 to store and retrieve a PC subscription key and Jupyter Hub token, with convenience methods to easily interact with the PC Data Catalog \ud83c\udf0d and Dask Gateway \ud83d\ude80 server.</p> <p>For more information about:</p> <ul> <li>using Azure services with Prefect and the Planetary Computer, check out the <code>prefect-azure</code> collection.</li> <li>the integration between Prefect and Dask, check out the <code>prefect-dask</code> collection.</li> <li>taking advantage of the Planetary Computer data catalog and compute resources, check out the Planetary Computer documentation.</li> </ul>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-planetary-computer</code> with <code>pip</code>:</p> <pre><code>pip install prefect-planetary-computer\n</code></pre> <p>Requires an installation of Python 3.8+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#usage","title":"Usage","text":"<p>Note</p> <ul> <li> <p>The following Examples are adapted from Planetary Computer - Scale with Dask.</p> </li> <li> <p>Require the following additional packages:     <pre><code>pip install xarray zarr adlfs netcdf4 prefect_azure\n</code></pre></p> </li> <li>Make sure to share the same python dependencies - in particular <code>dask</code> and <code>distributed</code> - between the flow execution environment, the Dask Scheduler and Workers, as explained in the Dask docs.</li> </ul>"},{"location":"#computing-dask-collections","title":"Computing Dask Collections","text":"<p>Dask collection computations, such as Dask DataFrames, can be supported from within a Prefect task by creating a Dask Gateway cluster using the credentials block within the main flow or task itself.</p> <pre><code># Prefect tasks are executed using the default ConcurrentTaskRunner\n# Dask Collections tasks are executed on a new temporary Dask cluster \n\nimport xarray as xr\n\nfrom prefect import flow, task, get_run_logger\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_upload\n\npc_credentials = PlanetaryComputerCredentials.load(\"PC_BLOCK_NAME\")\nbs_credentials = AzureBlobStorageCredentials.load(\"BS_BLOCK_NAME\")\n\n@task\ndef compute_mean(asset):\n    logger = get_run_logger()\n\n    with pc_credentials.new_gateway_cluster(\n        name=\"test-cluster\",\n        image=\"pangeo/pangeo-notebook:latest\"\n    ) as cluster:\n\n        cluster.adapt(minimum=2, maximum=10)\n        client = cluster.get_client()\n\n        ds = xr.open_zarr(\n            asset.href,\n            **asset.extra_fields[\"xarray:open_kwargs\"],\n            storage_options=asset.extra_fields[\"xarray:storage_options\"]\n        )\n        logger.info(f\"Daymet dataset info\\n: {ds}\")\n\n        timeseries = ds[\"tmin\"].mean(dim=[\"x\", \"y\"]).compute()\n        logger.info(f\"Mean timeseries info\\n: {timeseries}\")\n\n    return timeseries\n\n@flow\ndef pc_dask_flow():\n\n    # get a configured PySTAC client\n    catalog = pc_credentials.get_stac_catalog()\n\n    # compute the minimum daily temperature averaged over all of Hawaii, \n    # using the Daymet dataset\n    asset = catalog.get_collection(\"daymet-daily-hi\").assets[\"zarr-abfs\"]\n    prefect_future = compute_mean.submit(asset)\n    timeseries = prefect_future.result()\n\n    # save NetCDF timeseries file\n    timeseries.to_netcdf(\"timeseries.nc\")\n\n    # upload to 'my-container' blob storage container\n    with open(\"timeseries.nc\", \"rb\") as f:\n        blob = blob_storage_upload(\n            data=f.read(),\n            container=\"my-container\",\n            blob=\"timeseries.nc\",\n            blob_storage_credentials=bs_credentials,\n            overwrite=False,\n        )\n\n    # return the blob name of the uploaded timeseries object\n    return blob\n\npc_dask_flow()\n</code></pre>"},{"location":"#using-the-dask-task-runner","title":"Using the Dask Task Runner","text":"<p>Prefect's <code>prefect_dask.DaskTaskRunner</code> automatically instatiates a temporary Dask cluster at flow execution time, enabling submission of both Prefect and Dask Collections tasks.</p> <p>Warning</p> <ul> <li><code>prefect-dask</code> requires:     <pre><code>distributed==2022.2.0; python_version &lt; '3.8'\ndistributed&gt;=2022.5.0,&lt;=2023.3.1\n</code></pre></li> <li>It requires less configuration on the Dask Workers side when using Prefect Cloud, you can get started for free.</li> </ul> <pre><code># Both Prefect tasks and Dask Collections task are executed\n# on a new temporary Dask cluster \nimport xarray as xr\n\nfrom prefect import flow, task, get_run_logger\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\nfrom prefect_azure import AzureBlobStorageCredentials\nfrom prefect_azure.blob_storage import blob_storage_upload\n\nfrom prefect_dask import get_dask_client \n\npc_credentials = PlanetaryComputerCredentials.load(\"PC_BLOCK_NAME\")\nbs_credentials = AzureBlobStorageCredentials.load(\"BS_BLOCK_NAME\")\n\npc_runner = pc_credentials.get_dask_task_runner(\n    cluster_kwargs={\n        \"image\": \"pangeo/pangeo-notebook:latest\",\n    },\n    adapt_kwargs={'minimum': 1, 'maximum': 10, 'active': True}\n)\n\n@task\ndef compute_mean(asset):\n    logger = get_run_logger()\n\n    with get_dask_client() as client:\n        ds = xr.open_zarr(\n            asset.hr\n            **asset.extra_fields[\"xarray:open_kwargs\"],\n            storage_options=asset.extra_fields[\"xarray:storage_options\"]\n        )\n        logger.info(f\"Daymet dataset info\\n: {ds}\")\n\n        timeseries = ds[\"tmin\"].mean(dim=[\"x\", \"y\"]).compute()\n        logger.info(f\"Mean timeseries info\\n: {timeseries}\")\n\n    return timeseries\n\n@flow(task_runner=pc_runner)\ndef pc_dask_flow():\n\n    # get a configured PySTAC client\n    catalog = pc_credentials.get_stac_catalog()\n\n    # compute the minimum daily temperature averaged over all of Hawaii, \n    # using the Daymet dataset\n    asset = catalog.get_collection(\"daymet-daily-hi\").assets[\"zarr-abfs\"]\n\n    mean_task = compute_mean.submit(asset)\n    timeseries = mean_task.result()\n\n    # save NetCDF timeseries file\n    timeseries.to_netcdf(\"timeseries.nc\")\n\n    # upload to 'my-container' blob storage container\n    with open(\"timeseries.nc\", \"rb\") as f:\n        blob = blob_storage_upload(\n            data=f.read(),\n            container=\"my-container\",\n            blob=\"timeseries.nc\",\n            blob_storage_credentials=bs_credentials,\n            overwrite=False,\n        )\n\n    # return the blob name of the uploaded timeseries object\n    return blob\n\npc_dask_flow()\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-planetary-computer</code>, feel free to open an issue in the prefect-planetary-computer repository.</p> <p>If you have any questions or issues while using <code>prefect-planetary-computer</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-planetary-computer</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-planetary-computer</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-planetary-computer</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_planetary_computer\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>PlanetaryComputerCredentials</p> <p>Block used to manage Microsoft Planetary Computer credentials.</p> <p>The block stores a subscription key to access the full PC data catalog and a JupyterHub API token to instantiate clusters through Dask Gateway.</p> <p>To load the PlanetaryComputerCredentials: <pre><code>from prefect import flow\nfrom prefect_planetary_computer.credentials import PlanetaryComputerCredentials\n\n@flow\ndef my_flow():\n    my_block = PlanetaryComputerCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_planetary_computer.credentials","title":"<code>prefect_planetary_computer.credentials</code>","text":"<p>Module handling Microsoft Planetary Computer credentials</p>"},{"location":"credentials/#prefect_planetary_computer.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials","title":"<code>PlanetaryComputerCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block used to manage Microsoft Planetary Computer credentials.</p> <p>The block stores a subscription key to access the full PC data catalog and a JupyterHub API token to instantiate clusters through Dask Gateway.</p> <p>Parameters:</p> Name Type Description Default <code>subscription_key</code> <code>str</code> <p>A subscription key to access the full PC data catalog.</p> required <code>hub_api_token</code> <code>str</code> <p>The JupyterHub API token to instantiate clusters through Dask Gateway.</p> required Example <p>Load stored Planetary Computer credentials: <pre><code>from prefect_planetary_computer import PlanetaryComputerCredentials\npc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>class PlanetaryComputerCredentials(Block):\n\"\"\"\n    Block used to manage Microsoft Planetary Computer credentials.\n\n    The block stores a [subscription key](https://planetarycomputer.microsoft.com/docs/concepts/sas#when-an-account-is-needed)\n    to access the full PC data catalog and a\n    [JupyterHub API token](https://planetarycomputer.microsoft.com/docs/concepts/computing/#request-a-token-from-jupyterhub)\n    to instantiate clusters through Dask Gateway.\n\n    Args:\n        subscription_key (str): A subscription key to access the full PC data catalog.\n        hub_api_token (str): The JupyterHub API token to instantiate clusters through Dask Gateway.\n\n    Example:\n        Load stored Planetary Computer credentials:\n        ```python\n        from prefect_planetary_computer import PlanetaryComputerCredentials\n        pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"  # noqa E501\n\n    _block_type_name = \"Planetary Computer Credentials\"\n    _logo_url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Microsoft_logo.svg/512px-Microsoft_logo.svg.png\"  # noqa\n    _documentation_url = \"https://giorgiobasile.github.io/prefect-planetary-computer/blocks/#prefect_planetary_computer.blocks.PlanetarycomputerBlock\"  # noqa\n\n    subscription_key: Optional[SecretStr] = Field(\n        default=None,\n        description=\"A subscription key to access the full PC data catalog.\",\n        title=\"PC Subscription Key\",\n    )\n    hub_api_token: Optional[SecretStr] = Field(\n        default=None,\n        description=\"The JupyterHub API token to instantiate clusters through Dask Gateway.\",  # noqa E501\n        title=\"JupyterHub API Token\",\n    )\n\n    def __eq__(self, other: Any) -&gt; bool:\n\"\"\"\n        Equality comparison between two `PlanetaryComputerCredentials` instances.\n        \"\"\"\n        if not isinstance(other, PlanetaryComputerCredentials):\n            return False\n        return (\n            self.subscription_key == other.subscription_key\n            and self.hub_api_token.get_secret_value()\n            == other.hub_api_token.get_secret_value()\n        )\n\n    def get_stac_catalog(\n        self, sign_inplace: bool = True, **pystac_kwargs: Dict\n    ) -&gt; pystac_client.Client:\n\"\"\"\n        Provides a [PySTAC client](https://pystac-client.readthedocs.io/en/stable/api.html#client) for the PC data catalog,\n        optionally signing items automatically as they are retrieved.\n\n        For more information about PC signing, refer to the [docs](https://planetarycomputer.microsoft.com/docs/concepts/sas).\n\n        Args:\n            sign_inplace: Whether to automatically sign items through the\n                [planetary_computer.sign_inplace](https://github.com/microsoft/planetary-computer-sdk-for-python#automatic-signing) modifier.\n            pystac_kwargs: Additional keyword arguments to pass to the\n                [`pystac_client.Client.open`](https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.open) method.\n\n        Returns:\n            A PySTAC client for the PC Catalog.\n\n        Example:\n            Get a configured PySTAC client with automatic asset signing:\n            ```python\n            from prefect import flow\n            from prefect_planetary_computer import PlanetaryComputerCredentials\n\n            @flow\n            def example_get_stac_catalog_flow():\n                pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n                catalog = pc_credentials_block.get_stac_catalog()\n\n                # Search STAC catalog for Landsat Collection 2 Level 2 items\n                time_range = \"2020-12-01/2020-12-31\"\n                bbox = [-122.2751, 47.5469, -121.9613, 47.7458]\n\n                search = catalog.search(collections=[\"landsat-c2-l2\"], bbox=bbox, datetime=time_range)\n                items = search.get_all_items()\n                return len(items)\n\n            example_get_stac_catalog_flow()\n            ```\n        \"\"\"  # noqa E501\n\n        if self.subscription_key:\n            planetary_computer.set_subscription_key(\n                self.subscription_key.get_secret_value()\n            )\n\n        modifier = planetary_computer.sign_inplace if sign_inplace else None\n\n        return pystac_client.Client.open(\n            CATALOG_URL, modifier=modifier, **pystac_kwargs\n        )\n\n    def get_gateway(self, **gateway_kwargs: Dict) -&gt; dask_gateway.Gateway:\n\"\"\"\n        Provides a client for the PC Dask Gateway Server,\n        setting the proper addresses and Jupyter authentication.\n\n        For examples on how to use the Dask Gateway client, refer to the [PC - Scale with Dask](https://planetarycomputer.microsoft.com/docs/quickstarts/scale-with-dask/) tutorial.\n\n        Args:\n            gateway_kwargs: Additional keyword arguments to pass\n                to the Dask Gateway client.\n\n        Returns:\n            A Dask Gateway client to instantiate clusters.\n\n        Example:\n            Get a configured Dask Gateway client:\n            ```python\n            from prefect import flow\n            from prefect_planetary_computer import PlanetaryComputerCredentials\n\n            @flow\n            def example_get_gateway_flow():\n                pc_credentials_block = PlanetaryComputerCredentials(\n                    subscription_key = \"sub-key\",\n                    hub_api_token = \"hub-token\"\n                )\n                gateway = pc_credentials_block.get_gateway()\n\n                # List available clusters\n                clusters = gateway.list_clusters()\n                return len(clusters)\n\n            example_get_gateway_flow()\n            ```\n        \"\"\"  # noqa E501\n        if self.hub_api_token is None:\n            raise ValueError(\"JupyterHub API Token hasn't been provided.\")\n\n        return dask_gateway.Gateway(\n            address=GATEWAY_ADDRESS,\n            proxy_address=GATEWAY_PROXY_ADDRESS,\n            auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n            **gateway_kwargs,\n        )\n\n    def new_gateway_cluster(\n        self,\n        worker_cores: Optional[float] = None,\n        worker_memory: Optional[float] = None,\n        image: Optional[str] = None,\n        gpu: Optional[bool] = False,\n        environment: Optional[dict] = None,\n        **gateway_cluster_kwargs: Dict,\n    ) -&gt; dask_gateway.GatewayCluster:\n\"\"\"\n        Instantiate a new cluster from the PC Dask Gateway Server.\n\n        Each argument corresponds to one of the available PC Dask Gateway cluster option.\n        PC sets some defaults, but they can be overridden by passing the corresponding argument to this function -\n        [see Helm chart](https://github.com/microsoft/planetary-computer-hub/blob/main/helm/chart/config.yaml).\n\n        Args:\n            worker_cores: Number of cores per worker, in the 0.1-8 range. Defaults to 1.\n            worker_memory: Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.\n            image: The Docker image to be used for the workers.\n                Defaults to [`pangeo/pangeo-notebook:latest`](https://hub.docker.com/layers/pangeo/pangeo-notebook/latest/images/sha256-94e97e24adf14e72c01f18c782b8c4e0efb1e05950a5f2d2e86e67adcbf547f8)\n                To use the PC official images, refer to the [`planetary-computer-containers`](https://github.com/Microsoft/planetary-computer-containers) repo.\n            gpu: Whether to use GPU workers. Defaults to False.\n            environment: Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.\n            gateway_cluster_kwargs: Additional keyword arguments to pass to [`dask_gateway.GatewayCluster`](https://gateway.dask.org/api-client.html#dask_gateway.GatewayCluster) constructor.\n\n        Returns:\n            A client for the Dask cluster just created.\n\n        Example:\n            Instantiate a new cluster using PC Dask Gateway Server:\n            ```python\n            import dask.array as da\n            from prefect import flow\n            from prefect_planetary_computer import PlanetaryComputerCredentials\n\n            @flow\n            def example_new_cluster_flow():\n                pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n                # Create a Dask Gateway cluster with default configuration\n                # it will be automatically used for any subsequent dask compute\n                cluster = pc_credentials_block.new_cluster()\n\n                # Scale the cluster to at most 10 workers\n                cluster.adapt(minimum=2, maximum=10)\n\n                # Create a Dask array with 1 billion elements and sum them\n                x = da.random.random(1000000000)\n                result = x.sum().compute()\n\n                return result\n\n            example_new_cluster_flow()\n            ```\n        \"\"\"  # noqa E501\n\n        gateway_cluster_kwargs.update(\n            self._get_cluster_options_dict(\n                worker_cores=worker_cores,\n                worker_memory=worker_memory,\n                image=image,\n                gpu=gpu,\n                environment=environment,\n            )\n        )\n\n        return dask_gateway.GatewayCluster(\n            address=GATEWAY_ADDRESS,\n            proxy_address=GATEWAY_PROXY_ADDRESS,\n            auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n            **gateway_cluster_kwargs,\n        )\n\n    def get_dask_task_runner(\n        self,\n        worker_cores: Optional[float] = None,\n        worker_memory: Optional[float] = None,\n        image: Optional[str] = None,\n        gpu: Optional[bool] = False,\n        environment: Optional[dict] = None,\n        cluster_kwargs: Dict = None,\n        adapt_kwargs: Dict = None,\n        client_kwargs: Dict = None,\n    ) -&gt; DaskTaskRunner:\n\n\"\"\"\n        Provides a [`prefect_dask.DaskTaskRunner`](https://prefecthq.github.io/prefect-dask/task_runners/#prefect_dask.task_runners.DaskTaskRunner)\n        with PC-specific configurations.\n\n        This will use the PC Dask Gateway Server to create a new cluster the same way as\n        [`PlanetaryComputerCredentials.new_gateway_cluster`](#new_gateway_cluster) does,\n        but it will automatically happen at flow submission time.\n\n        Each argument corresponds to one of the available PC Dask Gateway cluster option.\n        PC sets some defaults, but they can be overridden by passing the corresponding argument to this function -\n        [see Helm chart](https://github.com/microsoft/planetary-computer-hub/blob/main/helm/chart/config.yaml).\n\n        Args:\n            worker_cores: Number of cores per worker, in the 0.1-8 range. Defaults to 1.\n            worker_memory: Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.\n            image: The Docker image to be used for the workers.\n                Defaults to [`pangeo/pangeo-notebook:latest`](https://hub.docker.com/layers/pangeo/pangeo-notebook/latest/images/sha256-94e97e24adf14e72c01f18c782b8c4e0efb1e05950a5f2d2e86e67adcbf547f8)\n                To use the PC official images, refer to the [`planetary-computer-containers`](https://github.com/Microsoft/planetary-computer-containers) repo.\n            gpu: Whether to use GPU workers. Defaults to False.\n            environment: Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.\n            cluster_kwargs: Additional kwargs to pass to\n                [`dask_gateway.GatewayCluster`](https://gateway.dask.org/api-client.html#gatewaycluster)\n                when creating a temporary dask cluster.\n            adapt_kwargs: Additional kwargs to pass to\n                [`dask_gateway.Gateway,adapt_cluster`](https://gateway.dask.org/api-client.html#dask_gateway.Gateway.adapt_cluster)\n                when creating a temporary cluster.\n                Note that adaptive scaling is only enabled if `adapt_kwargs` are provided.\n            client_kwargs: Additional kwargs to use when creating a\n                [`dask.distributed.Client`](https://distributed.dask.org/en/latest/api.html#client).\n\n        Examples:\n            Using a temporary PC Dask Gateway cluster:\n            ```python\n            from prefect import flow\n\n            pc_credentials = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n            pc_runner = pc_credentials.get_dask_task_runner()\n\n            @flow(task_runner=pc_runner)\n            def my_flow():\n                ...\n            ```\n\n            Providing additional kwargs to the PC Dask Gateway cluster:\n            ```python\n            pc_runner = pc_credentials.get_dask_task_runner(\n                cluster_kwargs={\n                    \"image\": \"pangeo/pangeo-notebook:latest\",\n                },\n                adapt_kwargs={'minimum': 1, 'maximum': 10, 'active': True}\n            )\n            ```\n\n            Connecting to an existing PC `GatewayCluster` (use `DaskTaskRunner` directly for this):\n            ```python\n            DaskTaskRunner(\n                address=cluster.address,\n                client_kwargs={'security': cluster.security}\n            )\n            ```\n\n        \"\"\"  # noqa: E501\n\n        if cluster_kwargs is None:\n            cluster_kwargs = {}\n\n        cluster_kwargs.update(\n            dict(\n                address=GATEWAY_ADDRESS,\n                proxy_address=GATEWAY_PROXY_ADDRESS,\n                auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n            )\n        )\n\n        cluster_kwargs.update(\n            self._get_cluster_options_dict(\n                worker_cores=worker_cores,\n                worker_memory=worker_memory,\n                image=image,\n                gpu=gpu,\n                environment=environment,\n            )\n        )\n\n        return DaskTaskRunner(\n            cluster_class=\"dask_gateway.GatewayCluster\",\n            cluster_kwargs=cluster_kwargs,\n            adapt_kwargs=adapt_kwargs,\n            client_kwargs=client_kwargs,\n        )\n\n    def _get_cluster_options_dict(\n        self,\n        worker_cores: Optional[float] = None,\n        worker_memory: Optional[float] = None,\n        image: Optional[str] = None,\n        gpu: Optional[bool] = False,\n        environment: Optional[dict] = None,\n    ) -&gt; Dict[str, Any]:\n\"\"\"\n        Return a dictionary of cluster options accepted by\n        the PC `dask_gateway.GatewayCluster` constructor.\n        \"\"\"\n\n        cluster_options = {}\n\n        if worker_cores is not None:\n            cluster_options[\"worker_cores\"] = worker_cores\n        if worker_memory is not None:\n            cluster_options[\"worker_memory\"] = worker_memory\n        if image is not None:\n            cluster_options[\"image\"] = image\n        if gpu is not None:\n            cluster_options[\"gpu\"] = gpu\n        if environment is not None:\n            cluster_options[\"environment\"] = environment\n\n        return cluster_options\n</code></pre>"},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials.__eq__","title":"<code>__eq__</code>","text":"<p>Equality comparison between two <code>PlanetaryComputerCredentials</code> instances.</p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>def __eq__(self, other: Any) -&gt; bool:\n\"\"\"\n    Equality comparison between two `PlanetaryComputerCredentials` instances.\n    \"\"\"\n    if not isinstance(other, PlanetaryComputerCredentials):\n        return False\n    return (\n        self.subscription_key == other.subscription_key\n        and self.hub_api_token.get_secret_value()\n        == other.hub_api_token.get_secret_value()\n    )\n</code></pre>"},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials.get_dask_task_runner","title":"<code>get_dask_task_runner</code>","text":"<p>Provides a <code>prefect_dask.DaskTaskRunner</code> with PC-specific configurations.</p> <p>This will use the PC Dask Gateway Server to create a new cluster the same way as <code>PlanetaryComputerCredentials.new_gateway_cluster</code> does, but it will automatically happen at flow submission time.</p> <p>Each argument corresponds to one of the available PC Dask Gateway cluster option. PC sets some defaults, but they can be overridden by passing the corresponding argument to this function - see Helm chart.</p> <p>Parameters:</p> Name Type Description Default <code>worker_cores</code> <code>Optional[float]</code> <p>Number of cores per worker, in the 0.1-8 range. Defaults to 1.</p> <code>None</code> <code>worker_memory</code> <code>Optional[float]</code> <p>Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.</p> <code>None</code> <code>image</code> <code>Optional[str]</code> <p>The Docker image to be used for the workers. Defaults to <code>pangeo/pangeo-notebook:latest</code> To use the PC official images, refer to the <code>planetary-computer-containers</code> repo.</p> <code>None</code> <code>gpu</code> <code>Optional[bool]</code> <p>Whether to use GPU workers. Defaults to False.</p> <code>False</code> <code>environment</code> <code>Optional[dict]</code> <p>Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.</p> <code>None</code> <code>cluster_kwargs</code> <code>Dict</code> <p>Additional kwargs to pass to <code>dask_gateway.GatewayCluster</code> when creating a temporary dask cluster.</p> <code>None</code> <code>adapt_kwargs</code> <code>Dict</code> <p>Additional kwargs to pass to <code>dask_gateway.Gateway,adapt_cluster</code> when creating a temporary cluster. Note that adaptive scaling is only enabled if <code>adapt_kwargs</code> are provided.</p> <code>None</code> <code>client_kwargs</code> <code>Dict</code> <p>Additional kwargs to use when creating a <code>dask.distributed.Client</code>.</p> <code>None</code> <p>Examples:</p> <p>Using a temporary PC Dask Gateway cluster: <pre><code>from prefect import flow\n\npc_credentials = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\npc_runner = pc_credentials.get_dask_task_runner()\n\n@flow(task_runner=pc_runner)\ndef my_flow():\n    ...\n</code></pre></p> <p>Providing additional kwargs to the PC Dask Gateway cluster: <pre><code>pc_runner = pc_credentials.get_dask_task_runner(\n    cluster_kwargs={\n        \"image\": \"pangeo/pangeo-notebook:latest\",\n    },\n    adapt_kwargs={'minimum': 1, 'maximum': 10, 'active': True}\n)\n</code></pre></p> <p>Connecting to an existing PC <code>GatewayCluster</code> (use <code>DaskTaskRunner</code> directly for this): <pre><code>DaskTaskRunner(\n    address=cluster.address,\n    client_kwargs={'security': cluster.security}\n)\n</code></pre></p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>def get_dask_task_runner(\n    self,\n    worker_cores: Optional[float] = None,\n    worker_memory: Optional[float] = None,\n    image: Optional[str] = None,\n    gpu: Optional[bool] = False,\n    environment: Optional[dict] = None,\n    cluster_kwargs: Dict = None,\n    adapt_kwargs: Dict = None,\n    client_kwargs: Dict = None,\n) -&gt; DaskTaskRunner:\n\n\"\"\"\n    Provides a [`prefect_dask.DaskTaskRunner`](https://prefecthq.github.io/prefect-dask/task_runners/#prefect_dask.task_runners.DaskTaskRunner)\n    with PC-specific configurations.\n\n    This will use the PC Dask Gateway Server to create a new cluster the same way as\n    [`PlanetaryComputerCredentials.new_gateway_cluster`](#new_gateway_cluster) does,\n    but it will automatically happen at flow submission time.\n\n    Each argument corresponds to one of the available PC Dask Gateway cluster option.\n    PC sets some defaults, but they can be overridden by passing the corresponding argument to this function -\n    [see Helm chart](https://github.com/microsoft/planetary-computer-hub/blob/main/helm/chart/config.yaml).\n\n    Args:\n        worker_cores: Number of cores per worker, in the 0.1-8 range. Defaults to 1.\n        worker_memory: Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.\n        image: The Docker image to be used for the workers.\n            Defaults to [`pangeo/pangeo-notebook:latest`](https://hub.docker.com/layers/pangeo/pangeo-notebook/latest/images/sha256-94e97e24adf14e72c01f18c782b8c4e0efb1e05950a5f2d2e86e67adcbf547f8)\n            To use the PC official images, refer to the [`planetary-computer-containers`](https://github.com/Microsoft/planetary-computer-containers) repo.\n        gpu: Whether to use GPU workers. Defaults to False.\n        environment: Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.\n        cluster_kwargs: Additional kwargs to pass to\n            [`dask_gateway.GatewayCluster`](https://gateway.dask.org/api-client.html#gatewaycluster)\n            when creating a temporary dask cluster.\n        adapt_kwargs: Additional kwargs to pass to\n            [`dask_gateway.Gateway,adapt_cluster`](https://gateway.dask.org/api-client.html#dask_gateway.Gateway.adapt_cluster)\n            when creating a temporary cluster.\n            Note that adaptive scaling is only enabled if `adapt_kwargs` are provided.\n        client_kwargs: Additional kwargs to use when creating a\n            [`dask.distributed.Client`](https://distributed.dask.org/en/latest/api.html#client).\n\n    Examples:\n        Using a temporary PC Dask Gateway cluster:\n        ```python\n        from prefect import flow\n\n        pc_credentials = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n        pc_runner = pc_credentials.get_dask_task_runner()\n\n        @flow(task_runner=pc_runner)\n        def my_flow():\n            ...\n        ```\n\n        Providing additional kwargs to the PC Dask Gateway cluster:\n        ```python\n        pc_runner = pc_credentials.get_dask_task_runner(\n            cluster_kwargs={\n                \"image\": \"pangeo/pangeo-notebook:latest\",\n            },\n            adapt_kwargs={'minimum': 1, 'maximum': 10, 'active': True}\n        )\n        ```\n\n        Connecting to an existing PC `GatewayCluster` (use `DaskTaskRunner` directly for this):\n        ```python\n        DaskTaskRunner(\n            address=cluster.address,\n            client_kwargs={'security': cluster.security}\n        )\n        ```\n\n    \"\"\"  # noqa: E501\n\n    if cluster_kwargs is None:\n        cluster_kwargs = {}\n\n    cluster_kwargs.update(\n        dict(\n            address=GATEWAY_ADDRESS,\n            proxy_address=GATEWAY_PROXY_ADDRESS,\n            auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n        )\n    )\n\n    cluster_kwargs.update(\n        self._get_cluster_options_dict(\n            worker_cores=worker_cores,\n            worker_memory=worker_memory,\n            image=image,\n            gpu=gpu,\n            environment=environment,\n        )\n    )\n\n    return DaskTaskRunner(\n        cluster_class=\"dask_gateway.GatewayCluster\",\n        cluster_kwargs=cluster_kwargs,\n        adapt_kwargs=adapt_kwargs,\n        client_kwargs=client_kwargs,\n    )\n</code></pre>"},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials.get_gateway","title":"<code>get_gateway</code>","text":"<p>Provides a client for the PC Dask Gateway Server, setting the proper addresses and Jupyter authentication.</p> <p>For examples on how to use the Dask Gateway client, refer to the PC - Scale with Dask tutorial.</p> <p>Parameters:</p> Name Type Description Default <code>gateway_kwargs</code> <code>Dict</code> <p>Additional keyword arguments to pass to the Dask Gateway client.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dask_gateway.Gateway</code> <p>A Dask Gateway client to instantiate clusters.</p> Example <p>Get a configured Dask Gateway client: <pre><code>from prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_get_gateway_flow():\n    pc_credentials_block = PlanetaryComputerCredentials(\n        subscription_key = \"sub-key\",\n        hub_api_token = \"hub-token\"\n    )\n    gateway = pc_credentials_block.get_gateway()\n\n    # List available clusters\n    clusters = gateway.list_clusters()\n    return len(clusters)\n\nexample_get_gateway_flow()\n</code></pre></p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>def get_gateway(self, **gateway_kwargs: Dict) -&gt; dask_gateway.Gateway:\n\"\"\"\n    Provides a client for the PC Dask Gateway Server,\n    setting the proper addresses and Jupyter authentication.\n\n    For examples on how to use the Dask Gateway client, refer to the [PC - Scale with Dask](https://planetarycomputer.microsoft.com/docs/quickstarts/scale-with-dask/) tutorial.\n\n    Args:\n        gateway_kwargs: Additional keyword arguments to pass\n            to the Dask Gateway client.\n\n    Returns:\n        A Dask Gateway client to instantiate clusters.\n\n    Example:\n        Get a configured Dask Gateway client:\n        ```python\n        from prefect import flow\n        from prefect_planetary_computer import PlanetaryComputerCredentials\n\n        @flow\n        def example_get_gateway_flow():\n            pc_credentials_block = PlanetaryComputerCredentials(\n                subscription_key = \"sub-key\",\n                hub_api_token = \"hub-token\"\n            )\n            gateway = pc_credentials_block.get_gateway()\n\n            # List available clusters\n            clusters = gateway.list_clusters()\n            return len(clusters)\n\n        example_get_gateway_flow()\n        ```\n    \"\"\"  # noqa E501\n    if self.hub_api_token is None:\n        raise ValueError(\"JupyterHub API Token hasn't been provided.\")\n\n    return dask_gateway.Gateway(\n        address=GATEWAY_ADDRESS,\n        proxy_address=GATEWAY_PROXY_ADDRESS,\n        auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n        **gateway_kwargs,\n    )\n</code></pre>"},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials.get_stac_catalog","title":"<code>get_stac_catalog</code>","text":"<p>Provides a PySTAC client for the PC data catalog, optionally signing items automatically as they are retrieved.</p> <p>For more information about PC signing, refer to the docs.</p> <p>Parameters:</p> Name Type Description Default <code>sign_inplace</code> <code>bool</code> <p>Whether to automatically sign items through the planetary_computer.sign_inplace modifier.</p> <code>True</code> <code>pystac_kwargs</code> <code>Dict</code> <p>Additional keyword arguments to pass to the <code>pystac_client.Client.open</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>pystac_client.Client</code> <p>A PySTAC client for the PC Catalog.</p> Example <p>Get a configured PySTAC client with automatic asset signing: <pre><code>from prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_get_stac_catalog_flow():\n    pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n    catalog = pc_credentials_block.get_stac_catalog()\n\n    # Search STAC catalog for Landsat Collection 2 Level 2 items\n    time_range = \"2020-12-01/2020-12-31\"\n    bbox = [-122.2751, 47.5469, -121.9613, 47.7458]\n\n    search = catalog.search(collections=[\"landsat-c2-l2\"], bbox=bbox, datetime=time_range)\n    items = search.get_all_items()\n    return len(items)\n\nexample_get_stac_catalog_flow()\n</code></pre></p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>def get_stac_catalog(\n    self, sign_inplace: bool = True, **pystac_kwargs: Dict\n) -&gt; pystac_client.Client:\n\"\"\"\n    Provides a [PySTAC client](https://pystac-client.readthedocs.io/en/stable/api.html#client) for the PC data catalog,\n    optionally signing items automatically as they are retrieved.\n\n    For more information about PC signing, refer to the [docs](https://planetarycomputer.microsoft.com/docs/concepts/sas).\n\n    Args:\n        sign_inplace: Whether to automatically sign items through the\n            [planetary_computer.sign_inplace](https://github.com/microsoft/planetary-computer-sdk-for-python#automatic-signing) modifier.\n        pystac_kwargs: Additional keyword arguments to pass to the\n            [`pystac_client.Client.open`](https://pystac-client.readthedocs.io/en/stable/api.html#pystac_client.Client.open) method.\n\n    Returns:\n        A PySTAC client for the PC Catalog.\n\n    Example:\n        Get a configured PySTAC client with automatic asset signing:\n        ```python\n        from prefect import flow\n        from prefect_planetary_computer import PlanetaryComputerCredentials\n\n        @flow\n        def example_get_stac_catalog_flow():\n            pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n            catalog = pc_credentials_block.get_stac_catalog()\n\n            # Search STAC catalog for Landsat Collection 2 Level 2 items\n            time_range = \"2020-12-01/2020-12-31\"\n            bbox = [-122.2751, 47.5469, -121.9613, 47.7458]\n\n            search = catalog.search(collections=[\"landsat-c2-l2\"], bbox=bbox, datetime=time_range)\n            items = search.get_all_items()\n            return len(items)\n\n        example_get_stac_catalog_flow()\n        ```\n    \"\"\"  # noqa E501\n\n    if self.subscription_key:\n        planetary_computer.set_subscription_key(\n            self.subscription_key.get_secret_value()\n        )\n\n    modifier = planetary_computer.sign_inplace if sign_inplace else None\n\n    return pystac_client.Client.open(\n        CATALOG_URL, modifier=modifier, **pystac_kwargs\n    )\n</code></pre>"},{"location":"credentials/#prefect_planetary_computer.credentials.PlanetaryComputerCredentials.new_gateway_cluster","title":"<code>new_gateway_cluster</code>","text":"<p>Instantiate a new cluster from the PC Dask Gateway Server.</p> <p>Each argument corresponds to one of the available PC Dask Gateway cluster option. PC sets some defaults, but they can be overridden by passing the corresponding argument to this function - see Helm chart.</p> <p>Parameters:</p> Name Type Description Default <code>worker_cores</code> <code>Optional[float]</code> <p>Number of cores per worker, in the 0.1-8 range. Defaults to 1.</p> <code>None</code> <code>worker_memory</code> <code>Optional[float]</code> <p>Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.</p> <code>None</code> <code>image</code> <code>Optional[str]</code> <p>The Docker image to be used for the workers. Defaults to <code>pangeo/pangeo-notebook:latest</code> To use the PC official images, refer to the <code>planetary-computer-containers</code> repo.</p> <code>None</code> <code>gpu</code> <code>Optional[bool]</code> <p>Whether to use GPU workers. Defaults to False.</p> <code>False</code> <code>environment</code> <code>Optional[dict]</code> <p>Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.</p> <code>None</code> <code>gateway_cluster_kwargs</code> <code>Dict</code> <p>Additional keyword arguments to pass to <code>dask_gateway.GatewayCluster</code> constructor.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dask_gateway.GatewayCluster</code> <p>A client for the Dask cluster just created.</p> Example <p>Instantiate a new cluster using PC Dask Gateway Server: <pre><code>import dask.array as da\nfrom prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_new_cluster_flow():\n    pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n    # Create a Dask Gateway cluster with default configuration\n    # it will be automatically used for any subsequent dask compute\n    cluster = pc_credentials_block.new_cluster()\n\n    # Scale the cluster to at most 10 workers\n    cluster.adapt(minimum=2, maximum=10)\n\n    # Create a Dask array with 1 billion elements and sum them\n    x = da.random.random(1000000000)\n    result = x.sum().compute()\n\n    return result\n\nexample_new_cluster_flow()\n</code></pre></p> Source code in <code>prefect_planetary_computer/credentials.py</code> <pre><code>def new_gateway_cluster(\n    self,\n    worker_cores: Optional[float] = None,\n    worker_memory: Optional[float] = None,\n    image: Optional[str] = None,\n    gpu: Optional[bool] = False,\n    environment: Optional[dict] = None,\n    **gateway_cluster_kwargs: Dict,\n) -&gt; dask_gateway.GatewayCluster:\n\"\"\"\n    Instantiate a new cluster from the PC Dask Gateway Server.\n\n    Each argument corresponds to one of the available PC Dask Gateway cluster option.\n    PC sets some defaults, but they can be overridden by passing the corresponding argument to this function -\n    [see Helm chart](https://github.com/microsoft/planetary-computer-hub/blob/main/helm/chart/config.yaml).\n\n    Args:\n        worker_cores: Number of cores per worker, in the 0.1-8 range. Defaults to 1.\n        worker_memory: Amount of memory per worker (in GiB) in the 1-64 range. Defaults to 8.\n        image: The Docker image to be used for the workers.\n            Defaults to [`pangeo/pangeo-notebook:latest`](https://hub.docker.com/layers/pangeo/pangeo-notebook/latest/images/sha256-94e97e24adf14e72c01f18c782b8c4e0efb1e05950a5f2d2e86e67adcbf547f8)\n            To use the PC official images, refer to the [`planetary-computer-containers`](https://github.com/Microsoft/planetary-computer-containers) repo.\n        gpu: Whether to use GPU workers. Defaults to False.\n        environment: Environment variables to set on the workers. Defaults to the GDAL and PYGEOS-related variables set in the PC Hub.\n        gateway_cluster_kwargs: Additional keyword arguments to pass to [`dask_gateway.GatewayCluster`](https://gateway.dask.org/api-client.html#dask_gateway.GatewayCluster) constructor.\n\n    Returns:\n        A client for the Dask cluster just created.\n\n    Example:\n        Instantiate a new cluster using PC Dask Gateway Server:\n        ```python\n        import dask.array as da\n        from prefect import flow\n        from prefect_planetary_computer import PlanetaryComputerCredentials\n\n        @flow\n        def example_new_cluster_flow():\n            pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n            # Create a Dask Gateway cluster with default configuration\n            # it will be automatically used for any subsequent dask compute\n            cluster = pc_credentials_block.new_cluster()\n\n            # Scale the cluster to at most 10 workers\n            cluster.adapt(minimum=2, maximum=10)\n\n            # Create a Dask array with 1 billion elements and sum them\n            x = da.random.random(1000000000)\n            result = x.sum().compute()\n\n            return result\n\n        example_new_cluster_flow()\n        ```\n    \"\"\"  # noqa E501\n\n    gateway_cluster_kwargs.update(\n        self._get_cluster_options_dict(\n            worker_cores=worker_cores,\n            worker_memory=worker_memory,\n            image=image,\n            gpu=gpu,\n            environment=environment,\n        )\n    )\n\n    return dask_gateway.GatewayCluster(\n        address=GATEWAY_ADDRESS,\n        proxy_address=GATEWAY_PROXY_ADDRESS,\n        auth=JupyterHubAuth(api_token=self.hub_api_token.get_secret_value()),\n        **gateway_cluster_kwargs,\n    )\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-planetary-computer</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<p>Instantiate a new cluster using PC Dask Gateway Server: <pre><code>import dask.array as da\nfrom prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_new_cluster_flow():\n    pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n    # Create a Dask Gateway cluster with default configuration\n    # it will be automatically used for any subsequent dask compute\n    cluster = pc_credentials_block.new_cluster()\n\n    # Scale the cluster to at most 10 workers\n    cluster.adapt(minimum=2, maximum=10)\n\n    # Create a Dask array with 1 billion elements and sum them\n    x = da.random.random(1000000000)\n    result = x.sum().compute()\n\n    return result\n\nexample_new_cluster_flow()\n</code></pre> Get a configured Dask Gateway client: <pre><code>from prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_get_gateway_flow():\n    pc_credentials_block = PlanetaryComputerCredentials(\n        subscription_key = \"sub-key\",\n        hub_api_token = \"hub-token\"\n    )\n    gateway = pc_credentials_block.get_gateway()\n\n    # List available clusters\n    clusters = gateway.list_clusters()\n    return len(clusters)\n\nexample_get_gateway_flow()\n</code></pre> Using a temporary PC Dask Gateway cluster: <pre><code>from prefect import flow\n\npc_credentials = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\npc_runner = pc_credentials.get_dask_task_runner()\n\n@flow(task_runner=pc_runner)\ndef my_flow():\n    ...\n</code></pre></p> <p>Providing additional kwargs to the PC Dask Gateway cluster: <pre><code>pc_runner = pc_credentials.get_dask_task_runner(\n    cluster_kwargs={\n        \"image\": \"pangeo/pangeo-notebook:latest\",\n    },\n    adapt_kwargs={'minimum': 1, 'maximum': 10, 'active': True}\n)\n</code></pre></p> <p>Connecting to an existing PC <code>GatewayCluster</code> (use <code>DaskTaskRunner</code> directly for this): <pre><code>DaskTaskRunner(\n    address=cluster.address,\n    client_kwargs={'security': cluster.security}\n)\n</code></pre> Get a configured PySTAC client with automatic asset signing: <pre><code>from prefect import flow\nfrom prefect_planetary_computer import PlanetaryComputerCredentials\n\n@flow\ndef example_get_stac_catalog_flow():\n    pc_credentials_block = PlanetaryComputerCredentials.load(\"BLOCK_NAME\")\n\n    catalog = pc_credentials_block.get_stac_catalog()\n\n    # Search STAC catalog for Landsat Collection 2 Level 2 items\n    time_range = \"2020-12-01/2020-12-31\"\n    bbox = [-122.2751, 47.5469, -121.9613, 47.7458]\n\n    search = catalog.search(collections=[\"landsat-c2-l2\"], bbox=bbox, datetime=time_range)\n    items = search.get_all_items()\n    return len(items)\n\nexample_get_stac_catalog_flow()\n</code></pre></p>"}]}